import { env } from "env"
import {
  beraTestnet,
  bitfinityTestnet,
  exosama,
  mint,
  neonEVM,
  oasisSapphire,
  ontology,
  palm,
  taikoKatlaTestnet,
  x1,
  zero,
} from "static/customChains"
import {
  http,
  type Chain,
  createTestClient,
  publicActions,
  walletActions,
} from "viem"
import { mnemonicToAccount } from "viem/accounts"
import { createConfig } from "wagmi"
import {
  arbitrum,
  arbitrumNova,
  astarZkEVM,
  avalanche,
  base,
  baseSepolia,
  blast,
  blastSepolia,
  boba,
  bsc,
  celo,
  coreDao,
  cronos,
  cronoszkEVM,
  cyber,
  evmos,
  fantom,
  filecoin,
  form,
  foundry,
  gnosis,
  harmonyOne,
  ink,
  inkSepolia,
  iota,
  kava,
  klaytn,
  linea,
  lisk,
  liskSepolia,
  lukso,
  mainnet,
  manta,
  mantle,
  metis,
  metisSepolia,
  mode,
  moonbeam,
  moonriver,
  opBNB,
  optimism,
  pgn,
  polygon,
  polygonZkEvm,
  ronin,
  rootstock,
  scroll,
  scrollSepolia,
  sei,
  sepolia,
  shimmer,
  soneium,
  sonic,
  sophon,
  taiko,
  worldchain,
  x1Testnet,
  xdc,
  zetachain,
  zetachainAthensTestnet,
  zkSync,
  zora,
} from "wagmi/chains"
import {
  coinbaseWallet,
  injected,
  mock,
  safe,
  walletConnect,
} from "wagmi/connectors"
import { TEST_USER } from "../../playwright/constants"

const IS_TEST = Boolean(
  typeof navigator !== "undefined" &&
    navigator.userAgent.includes("GUILD_E2E") &&
    process.env.NEXT_PUBLIC_E2E_WALLET_MNEMONIC
)

const foundrySepolia = { ...foundry, id: sepolia.id } as const
export const wagmiConfig = IS_TEST
  ? createConfig({
      chains: [foundrySepolia],
      transports: {
        [foundrySepolia.id]: http(foundrySepolia.rpcUrls.default.http[0]),
      } as any,
      connectors: [
        mock({
          accounts: [TEST_USER.address],
          features: {
            reconnect: false,
          },
        }),
      ],
      client: () =>
        createTestClient({
          chain: foundrySepolia,
          transport: http(foundrySepolia.rpcUrls.default.http[0]),
          mode: "anvil",
          account: mnemonicToAccount(
            process.env.NEXT_PUBLIC_E2E_WALLET_MNEMONIC ?? ""
          ),
        })
          .extend(publicActions)
          .extend(walletActions) as never,
      ssr: true,
      multiInjectedProviderDiscovery: false,
    })
  : createConfig({
      /**
       * We should consider adding only those chains here which we actually use for
       * client-side interactions (e.g. where users can mint Guild Pins, NFTs, buy tokens,
       * etc.)
       */
      chains: [
        mainnet,
        polygon,
        polygonZkEvm,
        base as Chain,
        baseSepolia as Chain,
        optimism as Chain,
        arbitrum,
        arbitrumNova,
        bsc,
        avalanche,
        gnosis,
        fantom,
        celo as Chain,
        harmonyOne,
        moonbeam,
        moonriver,
        metis,
        metisSepolia,
        cronos,
        boba,
        palm,
        exosama,
        evmos,
        zetachain,
        zetachainAthensTestnet,
        scroll,
        scrollSepolia,
        zkSync as Chain,
        zora as Chain,
        pgn,
        neonEVM,
        linea,
        lukso,
        mantle,
        ronin,
        shimmer,
        kava,
        bitfinityTestnet,
        x1,
        x1Testnet,
        ontology,
        beraTestnet,
        manta,
        taikoKatlaTestnet,
        blast,
        blastSepolia,
        oasisSapphire,
        sepolia,
        astarZkEVM,
        coreDao,
        liskSepolia as Chain,
        opBNB,
        form,
        cyber,
        taiko,
        klaytn,
        mint,
        sei,
        filecoin,
        rootstock,
        mode,
        lisk as Chain,
        cronoszkEVM,
        worldchain,
        inkSepolia,
        ink,
        iota,
        sonic,
        sophon,
        zero,
        xdc,
        soneium,
      ],
      transports: {
        [mainnet.id]: http(),
        [polygon.id]: http("https://polygon-bor-rpc.publicnode.com"),
        [polygonZkEvm.id]: http(),
        [base.id]: http(),
        [baseSepolia.id]: http(),
        [optimism.id]: http(),
        [arbitrum.id]: http(),
        [arbitrumNova.id]: http(),
        [bsc.id]: http(),
        [avalanche.id]: http(),
        [gnosis.id]: http(),
        [fantom.id]: http(),
        [celo.id]: http(),
        [harmonyOne.id]: http(),
        [moonbeam.id]: http(),
        [moonriver.id]: http(),
        [metis.id]: http(),
        [metisSepolia.id]: http(),
        [cronos.id]: http(),
        [boba.id]: http(),
        [palm.id]: http(),
        [exosama.id]: http(),
        [evmos.id]: http("https://evmos.lava.build"),
        [zetachain.id]: http(),
        [zetachainAthensTestnet.id]: http(),
        [scroll.id]: http(),
        [scrollSepolia.id]: http(),
        [zkSync.id]: http(),
        [zora.id]: http(),
        [pgn.id]: http(),
        [neonEVM.id]: http(),
        [linea.id]: http(),
        [lukso.id]: http(),
        [mantle.id]: http(),
        [ronin.id]: http(),
        [shimmer.id]: http(),
        [kava.id]: http(),
        [bitfinityTestnet.id]: http(),
        [x1.id]: http(),
        [x1Testnet.id]: http(),
        [ontology.id]: http(),
        [beraTestnet.id]: http(),
        [manta.id]: http(),
        [taikoKatlaTestnet.id]: http(),
        [blast.id]: http(),
        [blastSepolia.id]: http(),
        [oasisSapphire.id]: http(),
        [sepolia.id]: http(),
        [astarZkEVM.id]: http(),
        [coreDao.id]: http(),
        [liskSepolia.id]: http(),
        [opBNB.id]: http(),
        [form.id]: http(),
        [cyber.id]: http(),
        [taiko.id]: http(),
        [klaytn.id]: http(),
        [mint.id]: http(),
        [sei.id]: http(),
        [filecoin.id]: http(),
        [rootstock.id]: http(),
        [mode.id]: http(),
        [lisk.id]: http(),
        [cronoszkEVM.id]: http(),
        [worldchain.id]: http(),
        [inkSepolia.id]: http(),
        [ink.id]: http(),
        [iota.id]: http(),
        [sonic.id]: http(),
        [sophon.id]: http(),
        [zero.id]: http(),
        [xdc.id]: http(),
        [soneium.id]: http(),
      },
      ssr: true,
      connectors: [
        injected(),
        coinbaseWallet({
          appName: "Guild.xyz",
          appLogoUrl: "https://guild.xyz/guild-icon.png",
          version: "4",
        }),
        walletConnect({
          projectId: env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID,
          showQrModal: true,
          qrModalOptions: {
            explorerRecommendedWalletIds: [
              "971e689d0a5be527bac79629b4ee9b925e82208e5168b733496a09c0faed0709", // OKX
              "107bb20463699c4e614d3a2fb7b961e66f48774cb8f6d6c1aee789853280972c", // Bitcoin.com
              "541d5dcd4ede02f3afaf75bf8e3e4c4f1fb09edb5fa6c4377ebf31c2785d9adf", // Ronin
              "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0", // Trust
            ],
            themeVariables: {
              "--wcm-z-index": "10001",
              "--w3m-z-index": "10001",
            } as any, // casting it, so `--wcm-z-index` is accepted
          },
        }),
        safe({
          allowedDomains: [/gnosis-safe\.io$/, /app\.safe\.global$/],
          debug: false,
        }),
      ],
    })

export const COINBASE_INJECTED_WALLET_ID = "com.coinbase.wallet"
export const COINBASE_WALLET_SDK_ID = "coinbaseWalletSDK"
